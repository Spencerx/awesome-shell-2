#!/bin/bash

#
# Message module: functions for better display
#

# Messages:
msg_inline(){
    local msg="$*"
    if [[ "$*" == *... ]] && [ -n "$MSG_LINE_WITH_DOTS_MIN_LEN" ];then
        local num=$((MSG_LINE_WITH_DOTS_MIN_LEN - ${#msg}))
        local spacer_char='.'
        if [ $num -gt 0 ];then
            local extra
            extra=$(printf "%0.s$spacer_char" $(seq 1 $num))
            msg+=$extra
        fi;
    fi;
    echo -n -e "$msg" >&2
}

msg(){
    msg_inline "$*"
    echo >&2
}

# Fatal error:
fatal(){
    msg "❌  Fatal error: $*"
    exit 1
}

# Prints command it runs and then output
debug() {
    msg "Running: $*"
    "$*"
}

header(){
    local HEADER_MSG_CHAR='*'
    local message="$*"
    local num=$((14 + ${#message}))
    local line
    line=$(printf "%0.s$HEADER_MSG_CHAR" $(seq 1 $num))
    msg "$line"
    msg "$HEADER_MSG_CHAR$HEADER_MSG_CHAR     $message     $HEADER_MSG_CHAR$HEADER_MSG_CHAR"
    msg "$line\n"
}


# Print last command return status:
verbose_exit_code(){
    exit_code=$?
    if [ $exit_code -eq 0 ]; then
        msg_inline "$*" 
        msg " ✅  Ok"
    else
        msg_inline "$*"
        msg " ❌  Failed"
    fi;
    return $exit_code
}

# Terminate with fatal error if commod returns any error
fatal_if_any_error(){
    if [ $? -ne 0 ]; then
        fatal "$*"
    fi;
}

# Short-cut to check for required script/executable, that should reachable through the PATH
required_utility(){
    which -s "$*" 1>/dev/null 2>&1
    fatal_if_any_error "Was not able to find required '$*' utility in the PATH"
}

# Ask for user concent
ask_to_confirm(){
    read -r -p "$* ✋  -> [Y(es)/No]: " reply
    case $reply in
        [Yy]* ) return 0;;
            * ) return 1;;
    esac
}

# Pause for some time
# thos those cases when you  display something that will happen,
# but you want to give user some time to process information
pause_with_delay_in_seconds(){
    local delay
    local spacing
    local plural
    local clocks
    local clock_icon
    local num_clocks
    delay=$((0 + $*))
    clocks=(🕜  🕝  🕞  🕟  🕠  🕡  🕢  🕣  🕤  🕥  🕦  🕧 )
    num_clocks="${#clocks[@]}"
    spacing=$(printf "%0.s " $(seq 1 $((30 + ${#delay}))))
    if [ $delay -gt 0 ];then
        for i in $(seq $delay 1); do
            if [ "$i" -ne 1 ];then plural='s';else plural='';fi;
            msg_inline "\r$spacing"
            clock_icon=$((num_clocks - i % num_clocks - 1))
            msg_inline "\rWaiting for $i second$plural..."
            msg_inline "${clocks[$clock_icon]}  "
            sleep 1
        done
    fi;
    if [ $delay -ne 1 ];then plural='s';else plural='';fi;
    verbose_exit_code "\rWaited for $delay second$plural ..."
}
